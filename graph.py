import matplotlib.pyplot as plt
import numpy as np


thresholds = range(55, 101, 5)
f_measures = [
    [
        0.0011053922415282047, 0.0013175924949931485, 
        0.0012094742146816731, 0.0010991275674933022, 
        0.0011000721922376155, 0.001102877821816302,
        0.0011029158337354382, 0.0011052013538716584, 
        0.0011052013538716584, 0.0011053922415282047
    ],
    [
        0.00047897021403981436, 0.00031352569441042466,
        0.00031354719865174703, 0.000316396246749523,
        0.0003398976058462388, 0.0004653022647133665,
        0.00036443812751690087, 0.0003008649868371569,
        0.00030112262277804443, 0.0003011452931931753
    ],
    [
        0.00028087175571179054, 0.0002706794901075105,
        0.0002708123524284252, 0.0002718476294037192,
        0.0002783552683083829, 0.00027881850657837415,
        0.00027913711738588085, 0.0002793101040430138,
        0.00027931498001152177, 0.0002819432941549631
    ], 
    [
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0
    ],
    [
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0, 
        0.0, 0.0
    ],
    [
        0.00030041870857507654, 0.0003130931647848463,
        0.00031309469646936805, 0.0003131161416263448,
        0.0003131329934535633, 0.0003131820272664103,
        0.00033943431150523204, 0.00041319112672055363,
        0.00030028339245162625, 0.00030041870857507654
    ]
]

# Transpose pour que plt.plot marche
f_measures_transposed = np.array(f_measures).T.tolist()
labels = ["Levenshtein", "Jaro", "NGrams", "Synonymy", "Jaccard", "MongeElkan"]

plt.plot(thresholds, f_measures_transposed, marker='o')
plt.legend(labels, loc=0, bbox_to_anchor=(1, 1))
plt.xlabel("Filter's threshold", size="large")
plt.ylabel("H-mean F-measure", size="large")
plt.xlim(53, 102)
plt.tick_params(labelsize="large")
#afficher le plot
plt.show()